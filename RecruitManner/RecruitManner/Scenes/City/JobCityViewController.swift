//
//  JobCityViewController.swift
//  RecruitManner
//
//  Created by xiaohui on 16/11/24.
//  Copyright (c) 2016年 Jiang Duan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreLocation
import CustomViews

protocol JobCityViewControllerInput {

    func displaySomething(viewModel: JobCity.ViewModel)
}

protocol JobCityViewControllerOutput {

    func doSomething(request: JobCity.Request)
}


// ============================================================================= //
// MARK: - JobCityViewController Class Definition
// ============================================================================= //
class JobCityViewController: UIViewController, JobCityViewControllerInput {

    var output: JobCityViewControllerOutput!
    var router: JobCityRouter!
  
    @IBOutlet weak var cityButtonView: UIView!
    
    @IBOutlet weak var dropDownView: UIView!
    
    var menu:DOPDropDownMenu!
    var cityAreaList = ["光明新区","罗湖区","福田区","盐田区","南山区","宝安区","龙岗区","南澳大鹏新区","龙华新区","坪山新区"]
    var cityStreetList = ["华侨城","西丽","南山中心区","南头","海岸城/保利","前海","蛇口","太古城","花园城","世界之窗","海上世界","科技园","南油","欢乐海岸","白石洲","南山京基百纳"]
    var landMarkList = ["飞亚达","大冲商务中心","德赛科技","XXXXXXXXXXX","XXXXXXXXXXX","XXXXXXXXXXX"]
    
    @IBOutlet weak var cityButton: UIButton!
    
    @IBOutlet weak var cityAddress1: UIButton!
    
    @IBOutlet weak var cityAddress2: UIButton!
    @IBOutlet weak var cityAddress3: UIButton!
    
    
    @IBAction func cityButtonAction(_ sender: Any) {
        self.menu.menuTapped(nil)
    }
    
    var locationManager = CLLocationManager()
    // MARK: Object lifecycle
  
    override func awakeFromNib() {

        super.awakeFromNib()
        JobCityConfigurator.sharedInstance.configure(viewController:self)
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {

        super.viewDidLoad()
        doSomethingOnLoad()
        self.title = "选择地标"
        // 添加下拉菜单
        self.menu = DOPDropDownMenu(origin: CGPoint(x:0,y:0), andHeight: 0)
        self.menu.custom = true
        self.menu.delegate = self
        self.menu.dataSource = self
        self.dropDownView.addSubview(self.menu)
        self.menu.selectDefalutIndexPath()
        
        let saveCityName = UserDefaults.standard.string(forKey: "KCityName")
        if saveCityName == nil || saveCityName == ""{
            self.loadLocation()
        }
        else {
            self.cityButton.setTitle(saveCityName, for: .normal)
            let saveAddressName1 = UserDefaults.standard.string(forKey: "KcityAddress1")
            let saveAddressName2 = UserDefaults.standard.string(forKey: "KcityAddress2")
            let saveAddressName3 = UserDefaults.standard.string(forKey: "KcityAddress3")
            
            if saveAddressName1 != nil && saveAddressName1 != "" {
                self.cityAddress1.setTitle(saveAddressName1, for: .normal)
            }
            
            if saveAddressName2 != nil && saveAddressName2 != "" {
                self.cityAddress2.setTitle(saveAddressName2, for: .normal)
            }

            if saveAddressName3 != nil && saveAddressName3 != "" {
                self.cityAddress3.setTitle(saveAddressName3, for: .normal)
            }

        }
    }
  
    // MARK: Event handling
  
    func doSomethingOnLoad() {
        // NOTE: Ask the Interactor to do some work
    
        let request = JobCity.Request()
        output.doSomething(request: request)
    }
  
    // MARK: Display logic
  
    func displaySomething(viewModel: JobCity.ViewModel) {
        // NOTE: Display the result from the Presenter
    
        // nameTextField.text = viewModel.name
    }
}

extension JobCityViewController:DOPDropDownMenuDataSource,DOPDropDownMenuDelegate {
    func numberOfColumns(in menu: DOPDropDownMenu!) -> Int {
        return 1
    }
    
    func menu(_ menu: DOPDropDownMenu!, numberOfRowsInColumn column: Int) -> Int {
//        if column == 0 {
//            return self.cityAreaList.count
//        }
        return self.cityAreaList.count
    }
    
    func menu(_ menu: DOPDropDownMenu!, numberOfItemsInRow row: Int, column: Int) -> Int {
        if column == 0 {
            if row == 4 {
                return cityStreetList.count
            }
//            else if row == 2 {
//                return self.movices.count
//            } else if row == 3 {
//                return self.hostels.count
//            }
        }
        return 0
    }
    func menu(_ menu: DOPDropDownMenu!, numberOfsubItemsInItem item: Int, column: Int, row: Int) -> Int {
        if column == 0 {
            if row == 4 {
                if item == 11 {
                    return self.landMarkList.count
                }
            }
        }
        return 0
    }
    
    func menu(_ menu: DOPDropDownMenu!, titleForRowAt indexPath: DOPIndexPath!) -> String! {
//        if indexPath.column == 0 {
//            return self.classifys[indexPath.row]
//        } else if indexPath.column == 1 {
//            return self.areas[indexPath.row]
//        } else {
//            return self.sorts[indexPath.row]
//        }
        return cityAreaList[indexPath.row]
    }
    
    func menu(_ menu: DOPDropDownMenu!, titleForItemsInRowAt indexPath: DOPIndexPath!) -> String! {
        if indexPath.column == 0 {
            if indexPath.row == 4 {
                return self.cityStreetList[indexPath.item]
            }
        }
        
        return nil
    }
    
    
    func menu(_ menu: DOPDropDownMenu!, titleForsubItemsInItemAt indexPath: DOPIndexPath!) -> String! {
        if indexPath.column == 0 {
            if indexPath.row == 4 {
                if indexPath.item == 11 {
                    return self.landMarkList[indexPath.subItem]
                }
            }
        }
        return nil
    }
    
    func menu(_ menu: DOPDropDownMenu!, didSelectRowAt indexPath: DOPIndexPath!) {
        if indexPath.subItem >= 0 {
            print("点击了",indexPath.column,indexPath.row,indexPath.item,indexPath.subItem)
            
        } else if indexPath.item >= 0 {
            print("点击了 ",indexPath.column,indexPath.row,indexPath.item)
        } else {
            print("点击了",indexPath.column,indexPath.row)
        }
    }
    
    func menu(_ menu: DOPDropDownMenu!, didSelectRowAt indexPath: DOPIndexPath!, isNoHaveItem: Bool) {
        
        var addressName = ""
        if indexPath.subItem >= 0 {
            addressName = self.landMarkList[indexPath.subItem]
        }
        else if indexPath.item >= 0 {
            addressName = self.landMarkList[indexPath.item]
        }
        else if indexPath.row >= 0 {
            addressName = self.cityAreaList[indexPath.row]
        }
        
        let userDefaults = UserDefaults.standard
        
        var saveCityNumber = userDefaults.integer(forKey: "kSaveCityNumber")
        switch saveCityNumber {
        case 0:
            self.cityAddress1.setTitle(addressName, for: .normal)
            userDefaults.set(addressName, forKey: "KcityAddress1")
        case 1:
            self.cityAddress2.setTitle(addressName, for: .normal)
            userDefaults.set(addressName, forKey: "KcityAddress2")
        case 2:
            self.cityAddress3.setTitle(addressName, for: .normal)
            userDefaults.set(addressName, forKey: "KcityAddress3")
        default:
            self.cityAddress1.setTitle(addressName, for: .normal)
            userDefaults.set(addressName, forKey: "KcityAddress1")
            break
        }
        saveCityNumber = (saveCityNumber + 1) % 3
        userDefaults.set(saveCityNumber, forKey: "kSaveCityNumber")
        userDefaults.set("深圳市", forKey: "KCityName")
        
        userDefaults.synchronize()

    }
    
}

extension JobCityViewController: CLLocationManagerDelegate {
    
    func loadLocation() {
        if CLLocationManager.locationServicesEnabled() {
            self.locationManager.delegate = self
            self.locationManager.desiredAccuracy = kCLLocationAccuracyBest
            self.locationManager.requestWhenInUseAuthorization()
            self.locationManager.startUpdatingLocation()
        } else {
            
        }
        
    }
    
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let currentLocation:CLLocation = locations.last!
        self.lonLatToCity(location: currentLocation)
        manager.stopUpdatingLocation()
    }
    
    func lonLatToCity(location: CLLocation) {
        let geocoder = CLGeocoder()
        geocoder.reverseGeocodeLocation(location){(placemarks, error) -> Void in
            if (error == nil) {
                let array = placemarks! as [CLPlacemark]
                
                if (array.count > 0){
                    
                    let pm = array[0]
                    var subThoroughtare:String = ""
                    var thoroughfare:String = ""
                    var subLocality:String = ""
                    var locality:String = ""
                    
                    if pm.subThoroughfare != nil {subThoroughtare = pm.subThoroughfare!}
                    if pm.thoroughfare != nil {thoroughfare = pm.thoroughfare!}
                    if pm.subLocality != nil {subLocality = pm.subLocality!}
                    if pm.locality != nil {locality = pm.locality!}
                    locality = locality.replacingOccurrences(of: "市", with: "")
                    //                    self.navigationItemView.cityTitle = locality
//                    let userDefaults = UserDefaults.standard
//                    userDefaults.setValue(locality, forKey: "KCityName")
//                    userDefaults.synchronize()
                    self.cityButton.setTitle(locality, for: .normal)
                    print("\(subThoroughtare) \(thoroughfare) \n \(subLocality) \n \(locality) \n ")
                }else{
                    print("No Placemarks!")
                }
            } else {
                print(error.debugDescription)
            }
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didFinishDeferredUpdatesWithError error: Error?) {
        print(error?.localizedDescription ?? "")
    }
}

