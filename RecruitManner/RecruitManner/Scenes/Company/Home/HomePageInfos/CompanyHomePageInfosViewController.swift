//
//  CompanyHomePageInfosViewController.swift
//  RecruitManner
//
//  Created by Jiang Duan on 16/11/28.
//  Copyright (c) 2016年 Jiang Duan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CustomViews
import MJRefresh
import SDWebImage

protocol CompanyHomePageInfosViewControllerInput
{
    func displayTable(viewModel: CompanyHomePageInfos.ViewModel)
    func displayHeaderRefresh(end: Bool)
}

protocol CompanyHomePageInfosViewControllerOutput
{
    func dofetchInfos(request: CompanyHomePageInfos.Request)
}


// ============================================================================= //
// MARK: - CompanyHomePageInfosViewController Class Definition
// ============================================================================= //
class CompanyHomePageInfosViewController: UITableViewController, CompanyHomePageInfosViewControllerInput
{
    var output: CompanyHomePageInfosViewControllerOutput!
    var router: CompanyHomePageInfosRouter!
    
    @IBOutlet weak var customNavItemView: NavigationItemView!
    
    var viewModel = CompanyHomePageInfos.ViewModel()
    
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        CompanyHomePageInfosConfigurator.sharedInstance.configure(viewController:self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        customNavItemView.delegate = self
        
        self.tableView.mj_header = MJRefreshNormalHeader(refreshingBlock: { [weak self] in
            let request = CompanyHomePageInfos.Request()
            self?.output.dofetchInfos(request: request)
        })
        
        doSomethingOnLoad()
    }
    
    // MARK: Event handling
    
    func doSomethingOnLoad()
    {
        // NOTE: Ask the Interactor to do some work
        
        let request = CompanyHomePageInfos.Request()
        output.dofetchInfos(request: request)
    }
    
    // MARK: Display logic
    
    func displayTable(viewModel: CompanyHomePageInfos.ViewModel)
    {
        // NOTE: Display the result from the Presenter
        
        self.viewModel = viewModel
        self.tableView.reloadData()
    }
    
    func displayHeaderRefresh(end: Bool) {
        end ? self.tableView.mj_header.endRefreshing() : self.tableView.mj_header.beginRefreshing()
    }
}

extension CompanyHomePageInfosViewController: NavigationItemViewDelegate {
    
    func navigationSearchBarButtonClicked(_ searchBar: UISearchBar) -> Bool {
        return false
    }
}

extension CompanyHomePageInfosViewController {
    
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 2
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if section == 0 {
            return self.viewModel.positions?.count ?? 0
        } else if section == 1 {
            return self.viewModel.resumes?.count ?? 0
        }
        
        return 0
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case 0:
            return 120
        case 1:
            return 188
        default:
            return 44
        }
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0:
            return cellHomePost(in: tableView, forRowAt: indexPath)
        default:
            return cellHomeResume(in: tableView, forRowAt: indexPath)
        }
    }
    
    private func cellHomePost(in tableView: UITableView, forRowAt indexPath: IndexPath) -> UITableViewCell {
        let Identifier = "CellCompanyHomePagePostIdentifier"
        let cell = tableView.dequeueReusableCell(withIdentifier: Identifier, for: indexPath)
        
        guard let model = self.viewModel.positions?[indexPath.row] else {
            return cell
        }
        
        guard let view = cell.viewWithTag(1) as? JobInfoItemView else {
            return cell
        }
        
        let greCalendar = Calendar(identifier: .gregorian)
        var day: Int = 0
        if let date = model.date {
            day = greCalendar.component(.day, from: date)
            let today = greCalendar.component(.day, from: Date())
            if today != day {
                view.day = day
                view.month = greCalendar.component(.month, from: date)
            } else {
                view.dayText = "今天"
                view.monthText = ""
            }
        }
        view.titileText = model.title
        view.summaryText = model.summary
        view.markText = model.mark
        
        if indexPath.row == 0 {
            view.isHiddenDate = false
        } else if let prevModel = self.viewModel.positions?[indexPath.row - 1], let preDate = prevModel.date {
            view.isHiddenDate = greCalendar.component(.day, from: preDate) == day
        }
        
        return cell
    }
    
    private func cellHomeResume(in tableView: UITableView, forRowAt indexPath: IndexPath) -> UITableViewCell {
        let Identifier = "CellCompanyHomePageResumeIdentifier"
        let cell = tableView.dequeueReusableCell(withIdentifier: Identifier, for: indexPath)
        
        guard let model = self.viewModel.resumes?[indexPath.row] else {
            return cell
        }
        
        guard let view = cell.viewWithTag(1) as? ResumeItemView else {
            return cell
        }
        
        view.date = model.date
        view.nameText = model.name
        view.markText = model.mark
        let postString = model.positionTitle ?? ""
        view.postText = "投递给\"\(postString)\"的简历"
        
        if let urlstring = model.imageUrl, let url = URL(string: urlstring) {
        view.logoView.sd_setImageWithPreviousCachedImage(with: url,
                                                         placeholderImage: UIImage(named: "social_logo"),
                                                         options: .continueInBackground,
                                                         progress: nil,
                                                         completed: nil)
        }
        
        return cell
    }
}
