//
//  JobSeekerOfNearbyViewController.swift
//  RecruitManner
//
//  Created by Jiang Duan on 16/11/25.
//  Copyright (c) 2016å¹´ Jiang Duan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CustomViews
import MJRefresh
import SDWebImage

protocol JobSeekerOfNearbyViewControllerInput
{
    func displayTable(viewModel: JobSeekerOfNearby.ViewModel)
}

protocol JobSeekerOfNearbyViewControllerOutput
{
    func doFetchJobSeekers(request: JobSeekerOfNearby.Request)
}


// ============================================================================= //
// MARK: - JobSeekerOfNearbyViewController Class Definition
// ============================================================================= //
class JobSeekerOfNearbyViewController: UITableViewController, JobSeekerOfNearbyViewControllerInput
{
    var output: JobSeekerOfNearbyViewControllerOutput!
    var router: JobSeekerOfNearbyRouter!
    
    @IBOutlet weak var customNavItemView: NavigationItemView!
    
    fileprivate var jobDemand: NSDictionary?
    
    var viewModel = JobSeekerOfNearby.ViewModel()
    
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        JobSeekerOfNearbyConfigurator.sharedInstance.configure(viewController:self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        if let filePath = Bundle.main.path(forResource: "job_demand", ofType: "plist") {
            jobDemand = NSDictionary(contentsOfFile: filePath)
            
            if let menu = DOPDropDownMenu(origin: CGPoint(x:0,y:0), andHeight: 28) {
                menu.delegate = self
                menu.dataSource = self
                menu.backgroundColor = UIColor.green
                view.addSubview(menu)
                menu.selectDefalutIndexPath()
            }
        }
        
        self.tableView.mj_header = MJRefreshNormalHeader(refreshingBlock: { [weak self] in
            self?.tableView.mj_header.endRefreshing()
        })
        
        self.customNavItemView.delegate = self
        
        doSomethingOnLoad()
    }
    
    // MARK: Event handling
    
    func doSomethingOnLoad()
    {
        // NOTE: Ask the Interactor to do some work
        
        let request = JobSeekerOfNearby.Request()
        output.doFetchJobSeekers(request: request)
    }
    
    // MARK: Display logic
    
    func displayTable(viewModel: JobSeekerOfNearby.ViewModel) {
        self.viewModel = viewModel
        self.tableView.reloadData()
    }
}

extension JobSeekerOfNearbyViewController: NavigationItemViewDelegate {
    
    func navigationSearchBarButtonClicked(_ searchBar: UISearchBar) -> Bool {
        return false
    }
}

extension JobSeekerOfNearbyViewController {
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel.jobSeekers?.count ?? 0
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cellJobSeekerOfNearbyIdentifier", for: indexPath)
        
        guard let view = cell.viewWithTag(1) as? ResumeDeliverItemView else {
            return cell
        }
        
        guard let modle = viewModel.jobSeekers?[indexPath.row] else {
            return cell
        }
        
        view.nameLabel.text = modle.name
        view.infoLabel.text = modle.info
        view.markLabel.text = modle.mark
        view.companyLabel.text = modle.company
        view.ageLimitLabel.text = modle.ageLimit
        view.deliveryTimeLabel.text = modle.deliveryTime
        
        if let urlstring = modle.logoImageUlr, let url = URL(string: urlstring) {
            view.logoImageView.sd_setImageWithPreviousCachedImage(with: url,
                                                                  placeholderImage: UIImage(named: "social_logo"),
                                                                  options: .continueInBackground,
                                                                  progress: nil,
                                                                  completed: nil)
        }
        
        if let usrstr = modle.userImageUlr, let usrUrl = URL(string: usrstr) {
            view.userImageView.sd_setImageWithPreviousCachedImage(with: usrUrl,
                                                                  placeholderImage: UIImage(named: "User"),
                                                                  options: .continueInBackground,
                                                                  progress: nil,
                                                                  completed: nil)
        }
        
        return cell
    }
}

extension JobSeekerOfNearbyViewController: DOPDropDownMenuDataSource, DOPDropDownMenuDelegate {

    func numberOfColumns(in menu: DOPDropDownMenu!) -> Int {
        return jobDemand?.count ?? 0
    }
    
    func menu(_ menu: DOPDropDownMenu!, titleForColumn column: Int) -> String! {
        return (jobDemand?.allKeys[column] as? String) ?? ""
    }
    
    
    func menu(_ menu: DOPDropDownMenu!, numberOfRowsInColumn column: Int) -> Int {
        return (jobDemand?.allValues[column] as? NSArray)?.count ?? 0
    }
    
    func menu(_ menu: DOPDropDownMenu!, titleForRowAt indexPath: DOPIndexPath!) -> String! {
        return ((jobDemand?.allValues[indexPath.column] as? NSArray)?[indexPath.row] as? String) ?? ""
    }
    
    func menu(_ menu: DOPDropDownMenu!, numberOfItemsInRow row: Int, column: Int) -> Int {
        return 0
    }
}
