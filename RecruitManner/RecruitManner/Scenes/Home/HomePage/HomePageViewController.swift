//
//  HomePageViewController.swift
//  RecruitManner
//
//  Created by xiaohui on 16/11/15.
//  Copyright (c) 2016年 Jiang Duan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreLocation
import CustomViews

protocol HomePageViewControllerInput
{
    func displaySomething(viewModel: HomePage.ViewModel)
}

protocol HomePageViewControllerOutput
{
    func doSomething(request: HomePage.Request)
}


// ============================================================================= //
// MARK: - HomePageViewController Class Definition
// ============================================================================= //
class HomePageViewController: UITableViewController, HomePageViewControllerInput
{
    @IBOutlet weak var navigationItemView: NavigationItemView!
    var output: HomePageViewControllerOutput!
    var router: HomePageRouter!
    
    var locationManager = CLLocationManager()
    
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        HomePageConfigurator.sharedInstance.configure(viewController:self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomethingOnLoad()
        self.navigationItemView.delegate = self
        self.loadLocation()
        let userDefaults = UserDefaults.standard
        
        self.navigationItemView.cityTitle = userDefaults.string(forKey: "City")
    }
    
    // MARK: Event handling
    
    func doSomethingOnLoad()
    {
        // NOTE: Ask the Interactor to do some work
        
        let request = HomePage.Request()
        output.doSomething(request: request)
    }
    
    // MARK: Display logic
    
    func displaySomething(viewModel: HomePage.ViewModel)
    {
        // NOTE: Display the result from the Presenter
        
        // nameTextField.text = viewModel.name
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 10
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "RecruitCellIdentifier", for: indexPath)
        return cell
    }
}

extension HomePageViewController: NavigationItemViewDelegate {
    func cityButtonAction() {
        print("cityButtonAction clicked")
        let jobCityViewController = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "JobCityViewController")
        self.navigationController?.pushViewController(jobCityViewController, animated: true)
    }
    
    func CancelButtonAction() {
        print("CancelButtonAction clicked")
    }
    
    func NavigationSearchBarButtonClicked(_ searchBar: UISearchBar) {
        print("NavigationSearchBarButtonClicked clicked")
    }
    
}

extension HomePageViewController:CLLocationManagerDelegate {
    
    func loadLocation() {
        if CLLocationManager.locationServicesEnabled() {
            self.locationManager.delegate = self
            self.locationManager.desiredAccuracy = kCLLocationAccuracyBest
            self.locationManager.requestWhenInUseAuthorization()
            self.locationManager.startUpdatingLocation()
        } else {
            
        }
        
    }
    
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let currentLocation:CLLocation = locations.last!
        self.lonLatToCity(location: currentLocation)
        manager.stopUpdatingLocation()
    }
    
    func lonLatToCity(location: CLLocation) {
        let geocoder = CLGeocoder()
        geocoder.reverseGeocodeLocation(location){(placemarks, error) -> Void in
            if (error == nil) {
                let array = placemarks! as [CLPlacemark]
                
                if (array.count > 0){
    
                    let pm = array[0]
                    var subThoroughtare:String = ""
                    var thoroughfare:String = ""
                    var subLocality:String = ""
                    var locality:String = ""
                    
                    if pm.subThoroughfare != nil {subThoroughtare = pm.subThoroughfare!}
                    if pm.thoroughfare != nil {thoroughfare = pm.thoroughfare!}
                    if pm.subLocality != nil {subLocality = pm.subLocality!}
                    if pm.locality != nil {locality = pm.locality!}
                    locality = locality.replacingOccurrences(of: "市", with: "")
                    self.navigationItemView.cityTitle = locality
                    let userDefaults = UserDefaults.standard
                    userDefaults.setValue(locality, forKey: "City")
                    print("\(subThoroughtare) \(thoroughfare) \n \(subLocality) \n \(locality) \n ")
                }else{
                    print("No Placemarks!")
                }
            } else {
                print(error.debugDescription)
            }
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didFinishDeferredUpdatesWithError error: Error?) {
        print(error?.localizedDescription ?? "")
    }
}


