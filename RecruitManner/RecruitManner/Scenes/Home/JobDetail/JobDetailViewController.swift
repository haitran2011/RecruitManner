//
//  JobDetailViewController.swift
//  RecruitManner
//
//  Created by xiaohui on 16/11/15.
//  Copyright (c) 2016年 Jiang Duan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CustomViews

protocol JobDetailViewControllerInput
{
    func displaySomething(viewModel: JobDetail.ViewModel)
}

protocol JobDetailViewControllerOutput
{
    func doSomething(request: JobDetail.Request)
}


// ============================================================================= //
// MARK: - JobDetailViewController Class Definition
// ============================================================================= //
class JobDetailViewController: UITableViewController, JobDetailViewControllerInput
{
    var output: JobDetailViewControllerOutput!
    var router: JobDetailRouter!
    
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        JobDetailConfigurator.sharedInstance.configure(viewController:self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomethingOnLoad()
        self.tableView.contentInset.top += 30
    }
    
    // MARK: Event handling
    
    func doSomethingOnLoad()
    {
        // NOTE: Ask the Interactor to do some work
        
        let request = JobDetail.Request()
        output.doSomething(request: request)
    }
    
    // MARK: Display logic
    
    func displaySomething(viewModel: JobDetail.ViewModel)
    {
        // NOTE: Display the result from the Presenter
        
        // nameTextField.text = viewModel.name
    }
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 5
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        
        var rowNumber = 0
        if section < 4 {
            rowNumber = 1
        }
        else {
            rowNumber = 3
        }
        
        return rowNumber
    }
    
    override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headView1 = JobTableViewSessionHeader(frame: CGRect(x:0,y:0,width:self.tableView.frame.width,height:44))
        var title:String?
        switch section {
        case 1:
            title = "职位描述"
        case 2:
            title = "工作地址"
        case 3:
            title = "职位发布者"
        case 4:
            title = "面试评价"
        default:
            break
        }
        
        headView1.setTitle(title: title)
        //headView?.backgroundColor = UIColor.white
        return headView1
    }
    
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        //        let cell = tableView.dequeueReusableCell(withIdentifier: "reuseIdentifier", for: indexPath)
        
        // Configure the cell...
        var cell:UITableViewCell? = nil
        
        switch indexPath.section
        {
            
        case 0:
            cell = tableView.dequeueReusableCell(withIdentifier: "JobNameIdentifier")
            break
        case 1:
            cell = tableView.dequeueReusableCell(withIdentifier: "JobDescribtionIdentifier")
            break
        case 2:
            cell = tableView.dequeueReusableCell(withIdentifier: "JobAddressIdentifier")
            break
        case 3:
            cell = tableView.dequeueReusableCell(withIdentifier: "JobReleaseIdentifier")
            break
        case 4:
            cell = tableView.dequeueReusableCell(withIdentifier: "AppraisalIdentifier")
            break
        default:
            return cell!
        }
        
        
        return cell!
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        var rowHeiht:CGFloat = 44.0
        
        switch indexPath.section {
        case 0:
            rowHeiht = 160.0
        case 1:
            rowHeiht = 300.0
        case 2:
            rowHeiht = 44.0
        case 3:
            rowHeiht = 100.0
        case 4:
            rowHeiht = 120.0
        default: break
            
        }
        return rowHeiht
    }

}
