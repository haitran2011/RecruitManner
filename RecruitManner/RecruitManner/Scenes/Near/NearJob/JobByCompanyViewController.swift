//
//  JobByCompanyViewController.swift
//  RecruitManner
//
//  Created by xiaohui on 16/11/18.
//  Copyright (c) 2016年 Jiang Duan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit


protocol JobByCompanyViewControllerInput
{
    func displayCollection(viewModel: JobByCompany.ViewModel)
}

protocol JobByCompanyViewControllerOutput
{
    func doSomething(request: JobByCompany.Request)
    
    func doSelectItem(request: JobByCompany.Request)
}


// ============================================================================= //
// MARK: - JobByCompanyViewController Class Definition
// ============================================================================= //
class JobByCompanyViewController: UICollectionViewController, JobByCompanyViewControllerInput
{
    var output: JobByCompanyViewControllerOutput!
    var router: JobByCompanyRouter!
    
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        JobByCompanyConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    var viewMoel: JobByCompany.ViewModel = JobByCompany.ViewModel()
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomethingOnLoad()
        
    }
    
    // MARK: Event handling
    
    func doSomethingOnLoad()
    {
        // NOTE: Ask the Interactor to do some work
        
        let request = JobByCompany.Request()
        output.doSomething(request: request)
    }
    
    // MARK: Display logic
    
    func displayCollection(viewModel: JobByCompany.ViewModel)
    {
        // NOTE: Display the result from the Presenter
        
        // nameTextField.text = viewModel.name
        self.viewMoel = viewModel
        self.collectionView?.reloadData()
    }
    
    
    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return self.viewMoel.companys.count
    }
    
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of items
        return self.viewMoel.companys[section].count
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Cell", for: indexPath)
        
        // Configure the cell

        cell.layer.borderWidth = 0.5
        cell.layer.borderColor = UIColor.lightGray.cgColor
        if let cellTitleLable = cell.viewWithTag(3) as? UILabel {
            cellTitleLable.text = self.viewMoel.companys[indexPath.section][indexPath.row].title
        }
        cell.backgroundColor = self.viewMoel.companys[indexPath.section][indexPath.row].isSelected ? UIColor.lightGray : UIColor.white
        return cell
    }
    
    // MARK: UICollectionViewDelegate
    
    /*
     // Uncomment this method to specify if the specified item should be highlighted during tracking
     override func collectionView(_ collectionView: UICollectionView, shouldHighlightItemAt indexPath: IndexPath) -> Bool {
     return true
     }
     */
    
    
    // Uncomment this method to specify if the specified item should be selected
    override func collectionView(_ collectionView: UICollectionView, shouldSelectItemAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    
    /*
     // Uncomment these methods to specify if an action menu should be displayed for the specified item, and react to actions performed on the item
     override func collectionView(_ collectionView: UICollectionView, shouldShowMenuForItemAt indexPath: IndexPath) -> Bool {
     return false
     }
     
     override func collectionView(_ collectionView: UICollectionView, canPerformAction action: Selector, forItemAt indexPath: IndexPath, withSender sender: Any?) -> Bool {
     return false
     }
     
     override func collectionView(_ collectionView: UICollectionView, performAction action: Selector, forItemAt indexPath: IndexPath, withSender sender: Any?) {
     
     }
     */
    
    override func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        var headFootView: UICollectionReusableView
        
        if kind == UICollectionElementKindSectionHeader {
            headFootView = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: "HeaderIdentifier", for: indexPath)
            if let titleLable = headFootView.viewWithTag(2) as? UILabel {
                titleLable.text = indexPath.section == 0 ? "融资阶段" : "行业领域"
            }
        } else {
            headFootView = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionFooter, withReuseIdentifier: "FooterIdentifier", for: indexPath)
            
            if let okButton = headFootView.viewWithTag(4) as? UIButton {
                if indexPath.section == 0 {
                    okButton.isHidden = true
                } else {
                    okButton.addTarget(self, action: #selector(okAction), for: .touchUpInside)
                }
            }
        }
        return headFootView
    }
    
    func okAction() {
        (self.parent as? NearJobViewController)?.childView2.isHidden = true
    }
    
    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
//        let company = self.viewMoel.companys[indexPath.section][indexPath.row]
//        let title = company.title
//        var request = JobByCompany.Request()
//        request.companyTitle = title
//        request.companys = self.viewMoel.companys
//        output.doSelectItem(request: request)
        let cell = collectionView.cellForItem(at: indexPath)
        let isSelected =  !self.viewMoel.companys[indexPath.section][indexPath.row].isSelected
        self.viewMoel.companys[indexPath.section][indexPath.row].isSelected = isSelected
        cell?.backgroundColor = isSelected ? UIColor.lightGray : UIColor.white
    
    }

}
