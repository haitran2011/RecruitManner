//
//  JobBySelectedViewController.swift
//  RecruitManner
//
//  Created by xiaohui on 16/11/19.
//  Copyright (c) 2016年 Jiang Duan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol JobBySelectedViewControllerInput
{
    func displaySomething(viewModel: JobBySelected.ViewModel)
}

protocol JobBySelectedViewControllerOutput
{
    func doSomething(request: JobBySelected.Request)
}


// ============================================================================= //
// MARK: - JobBySelectedViewController Class Definition
// ============================================================================= //
class JobBySelectedViewController: UICollectionViewController, JobBySelectedViewControllerInput
{
    var output: JobBySelectedViewControllerOutput!
    var router: JobBySelectedRouter!
    
    var viewModel = JobBySelected.ViewModel()
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        JobBySelectedConfigurator.sharedInstance.configure(viewController:self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomethingOnLoad()
    }
    
    // MARK: Event handling
    
    func doSomethingOnLoad()
    {
        // NOTE: Ask the Interactor to do some work
        
        let request = JobBySelected.Request()
        output.doSomething(request: request)
    }
    
    // MARK: Display logic
    
    func displaySomething(viewModel: JobBySelected.ViewModel)
    {
        // NOTE: Display the result from the Presenter
        
        self.viewModel.jobTypeArray = viewModel.jobTypeArray
        self.collectionView?.reloadData()
        // nameTextField.text = viewModel.name
    }
    
    func okClickedAction() {
        (self.parent as? NearJobViewController)?.childView1.isHidden = true
    }
    
    override func numberOfSections(in collectionView: UICollectionView) -> Int {
       return self.viewModel.jobTypeArray.count
    }
    
    
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.viewModel.jobTypeArray[section].count
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        var cell:UICollectionViewCell
        switch indexPath.section {
        case 0:
            cell = collectionView.dequeueReusableCell(withReuseIdentifier: "SalaryCell", for: indexPath)
        default:
            cell = collectionView.dequeueReusableCell(withReuseIdentifier: "JobTypeCell", for: indexPath)
            cell.layer.borderWidth = 0.5
            cell.layer.borderColor = UIColor.lightGray.cgColor
        }
        
        if let titleLable = cell.viewWithTag(1) as? UILabel {
            titleLable.text = self.viewModel.jobTypeArray[indexPath.section][indexPath.row].title
        }
        
        if let imageView = cell.viewWithTag(2) as? UIImageView {
            if self.viewModel.jobTypeArray[indexPath.section][indexPath.row].isSelected {
                imageView.image = UIImage(named: "radio_button_checked")
            } else {
                imageView.image = UIImage(named: "radio_button_uchecked")
            }
        }
        
        if let jobTypeLabel = cell.viewWithTag(3) as? UILabel {
            jobTypeLabel.text = self.viewModel.jobTypeArray[indexPath.section][indexPath.row].title
            
        }
        
        if indexPath.section != 0 {
            cell.backgroundColor = self.viewModel.jobTypeArray[indexPath.section][indexPath.row].isSelected ? UIColor.lightGray : UIColor.white
        }

        return cell
        
    }
    
    
    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        self.viewModel.jobTypeArray[indexPath.section][indexPath.row].isSelected = !(self.viewModel.jobTypeArray[indexPath.section][indexPath.row].isSelected)
        let cell = collectionView.cellForItem(at: indexPath)
        if indexPath.section != 0 {
            cell?.backgroundColor = self.viewModel.jobTypeArray[indexPath.section][indexPath.row].isSelected ? UIColor.lightGray : UIColor.white
        }
        
        if let imageView = cell?.viewWithTag(2) as? UIImageView {
            if self.viewModel.jobTypeArray[indexPath.section][indexPath.row].isSelected {
                imageView.image = UIImage(named: "radio_button_checked")
            } else {
                imageView.image = UIImage(named: "radio_button_uchecked")
            }
        }
        
    }
    
//    override func collectionView(_ collectionView: UICollectionView, shouldSelectItemAt indexPath: IndexPath) -> Bool {
//        return true
//    }
    
    override func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        var headFootView: UICollectionReusableView
        
        if kind == UICollectionElementKindSectionFooter {
            headFootView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "JobTypeFooterIdentifier", for: indexPath)
            if let okButton = headFootView.viewWithTag(2) as? UIButton {
                switch indexPath.section {
                case 0,1,2:
                    okButton.isHidden = true
                default:
                    okButton.isHidden = false
                }
                
                okButton.addTarget(self, action: #selector(okClickedAction), for: .touchUpInside)
            }
            
        } else {
            headFootView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "JobTypeHeaderIdentifier", for: indexPath)
            
            if let titleLable = headFootView.viewWithTag(1) as? UILabel {
                switch indexPath.section {
                case 0:
                    titleLable.text = "月薪范围（可以多选）"
                case 1:
                    titleLable.text = "工作经验"
                case 2:
                    titleLable.text = "学历要求"
                default:
                    titleLable.text = "工作性质"
                }
            }
        }
        
        return headFootView
    }
}
